apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven' //jitpack上传
group='com.github.one-piece-luffy'// jitpack上传 : 这里对应自己的github名称就可以了

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"
    useLibrary 'org.apache.http.legacy'
    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

        }
    }
//    dataBinding {
//        enabled = true
//    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lintOptions {
        abortOnError false
    }


}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    api 'com.android.volley:volley:1.1.1'
//    api 'com.squareup.okio:okio:1.6.0'
    api 'org.apache:apache:23'
    api 'com.google.code.gson:gson:2.8.6'
    api 'com.squareup.okhttp3:okhttp:4.6.0'
    api 'org.conscrypt:conscrypt-android:2.2.1'

//    implementation 'com.ejlchina:okhttps:3.0.1'
    implementation 'com.ejlchina:okhttps-gson:3.0.1'

    api "android.arch.lifecycle:extensions:1.1.1"
// alternatively, just ViewModel
    api "android.arch.lifecycle:viewmodel:1.1.1"
// alternatively, just LiveData
    api "android.arch.lifecycle:livedata:1.1.1"


//    api 'com.alibaba:fastjson:1.1.70.android'
//    api 'com.alibaba:fastjson:1.2.55'
}


task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
}

//task javadoc(type: Javadoc) {
//    source = android.sourceSets.main.java.sourceFiles
//    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//}
//
//task javadocJar(type: Jar, dependsOn: javadoc) {
//    classifier = 'javadoc'
//    from javadoc.destinationDir
//}
//
//task classesJar(type: Jar) {
//    from "$buildDir/intermediates/classes/release"
//}

artifacts {
//    archives classesJar
//    archives javadocJar
    archives sourcesJar
}




////bintray 从这里开始配置
//
////添加这两行
//apply plugin: 'com.github.dcendents.android-maven'
//apply plugin: 'com.jfrog.bintray'
//
////项目主页--项目的GitHub地址
//def siteUrl = 'https://github.com/one-piece-luffy/netlibrary'
////项目的git地址
//def gitUrl = 'https://github.com/one-piece-luffy/netlibrary.git'
//
////发布到JCenter上的项目名字，compile引用时的第2部分项目名
//def libName = "netlibrary"
////compile引用时的第1部分
//group = "com.example.netlibrary"
//// 版本号，//compile引用时的最后部分项目名，下次更新是只需要更改版本号即可
//version = "0.0.32"
////上面配置后上传至JCenter后的编译路径是这样的： compile 'com.xzy.util:keyboard:1.0.0'
//
////生成源文件
//task sourcesJar(type: Jar) {
//    from android.sourceSets.main.java.srcDirs
//    classifier = 'sources'
//}
//
////生成Javadoc文档
////task javadoc(type: Javadoc) {
////    source = android.sourceSets.main.java.srcDirs
////    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
////options.addStringOption('encoding', 'UTF-8')
////    options.addStringOption('charSet', 'UTF-8')
////}
//
////文档打包成jar
////task javadocJar(type: Jar, dependsOn: javadoc) {
////    classifier = 'javadoc'
////    from javadoc.destinationDir
////}
//
////拷贝javadoc文件
////task copyDoc(type: Copy) {
////    from "${buildDir}/docs/"
////    into "docs"
////}
//
////上传到JCenter所需要的源码文件
//artifacts {
////    archives javadocJar
//    archives sourcesJar
//}
//
//// 配置maven库，生成POM.xml文件
//install {
//    repositories.mavenInstaller {
//        // This generates POM.xml with proper parameters
//        pom {
//            project {
//                packaging 'aar'
//                //项目描述，自由填写
//                name 'netlibrary'
//                url siteUrl
//                licenses {
//                    license {
//                        //开源协议
//                        name 'The Apache Software License, Version 2.0'
//                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
//                    }
//                }
//                developers {
//                    developer {
//                        //开发者的个人信息，根据个人信息填写
//                        id 'lihaiyi'
//                        name 'lihaiyi'
//                        email 'lihaiyi8@gmail.com'
//                    }
//                }
//                scm {
//                    connection gitUrl
//                    developerConnection gitUrl
//                    url siteUrl
//                }
//            }
//        }
//    }
//}
//
////上传到JCenter
//Properties properties = new Properties()
//properties.load(project.rootProject.file('local.properties').newDataInputStream())
//
//bintray {
//    user = properties.getProperty("bintray.user")    //读取 local.properties 文件里面的 bintray.user
//    key = properties.getProperty("bintray.apikey")   //读取 local.properties 文件里面的 bintray.apikey
//    configurations = ['archives']
//    pkg {
//        //这里的repo值必须要和你创建Maven仓库的时候的名字一样，我们前面创建的就是maven
//        repo = "netlibrary"
//        //发布到JCenter上的项目名字
//        name = libName
//        //项目描述
//        desc = 'netlibrary on Android'
//        websiteUrl = siteUrl
//        vcsUrl = gitUrl
//        licenses = ["Apache-2.0"]
//        publish = true
//    }
//}





